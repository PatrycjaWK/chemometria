# -*- coding: utf-8 -*-
"""SVM_soki.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1h8lGu7m6Pb3086u7BO7BI68tJ891JZHB
"""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from pandas_profiling import describe
from sklearn.svm import SVC
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.metrics import accuracy_score, precision_score,
recall_score
from sklearn.metrics import confusion_matrix, classification_report,
plot_confusion_matrix
import seaborn as sns
import scipy.io as 

#wykorzystanie klasyfikatora SVM do rozróżnienia 6 klas obiektów, reprezentujących 6 różnych wielkości dodatków SGF do soków jabłkowych

mat = spio.loadmat('sokizSGF.mat', squeeze_me=True)
X = mat['xaallsgf']
y = mat['ysgf']
 
X_train, X_test, y_train, y_test = train_test_split(X, y,
test_size=0.3, random_state=0)
svc = SVC(kernel='poly', degree=6)
print('Cross-validation')
 
# walidacja krzyżowa (10 podzbiorów)
scores = cross_val_score(svc, X_train, y_train, cv=10)
 
# dokładność dla każdego podzbioru, średnia dokładność i std
print('Accuracy: ',scores)
print('Accuracy (mean): ', scores.mean())
print('Accuracy (std): ', scores.std())
 
# dokładność zbioru treningowego i testowego
svc.fit(X_train, y_train) 
y_test_pred = svc.predict(X_test)
print('\nAccuracy (train):', accuracy_score(y_train, svc.predict(X_train)))
print('Accuracy (test):', accuracy_score(y_test, y_test_pred), '\n')
labels = np.unique(y)
print(classification_report(y_test, y_test_pred, labels=labels))
 
# Macierz pomyłek
print('\nConfusion matrix')
cm = confusion_matrix(y_test, y_test_pred)
print(pd.DataFrame(cm, index=['is_0', 'is_10', 'is_20', 'is_30',
'is_40', 'is_50'], columns=['pred_0', 'pred_10', 'pred_20',
'pred_30', 'pred_40', 'pred_50']))
 
print('\nConfusion matrix - plot')
pcm = plot_confusion_matrix(svc, X_test, y_test, labels=labels)
plt.show()