# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RdhcMYaqGw1foT2Q4QB-hrEAJ9JZHZze
"""

import pandas as pd
from sklearn.preprocessing import LabelEncoder
import plotly.express as px
from sklearn.metrics import accuracy_score
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt
import numpy as np

#Celem przeprowadzonej analizy jest określenie czy parametry znajdujące się w zbiorze Breast Cancer Wisconsin (Diagnostic) pozwalają na właściwą ocenę rodzaju raka

df = pd.read_csv('wdbc.data', header=None) # import danych
print(df)
X = df.values # zdefiniowanie macierzy X
X=np.delete(X, [0,1], 1)
 
y = df.values[:,1] # zdefiniowanie macierzy y
le = LabelEncoder() # transformacja macierzy y
y = le.fit_transform(y)

# Metoda 1

y_kmeans = KMeans(n_clusters=2).fit_predict(X) # wyliczenie y
plt.scatter(X[:, 0], X[:, 1], c=y_kmeans, s=50)
plt.show()
print('y_true: ')
print(y) # numery skupień dla każdego obiektu (dane wejściowe)
print('y_kmeans: ')
print(y_kmeans) # numery skupień dla każdego obiektu według kmeans
 
print('Accuracy k-means: ', accuracy_score(y,y_kmeans)) # dokadność

# Metoda 2

from sklearn.metrics import silhouette_score # dodatkowa biblioteka
 
kmeans = KMeans(n_clusters=2, n_init=10, init='k-means++')
kmeans.fit(X)
y_kmeans = kmeans.predict(X)
plt.scatter(X[:, 0], X[:, 1], c=y_kmeans, s=50, cmap='viridis')
centers = kmeans.cluster_centers_
plt.scatter(centers[:, 0], centers[:, 1], c='black', s=80, alpha=0.5)
plt.show()
 
print('SSE: ', kmeans.inertia_)
print('Silhouette score: ', silhouette_score(X, kmeans.labels_))