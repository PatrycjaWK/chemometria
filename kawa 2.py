# -*- coding: utf-8 -*-
"""Untitled6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1h8lGu7m6Pb3086u7BO7BI68tJ891JZHB
"""

import plotly.express as px
from sklearn.preprocessing import LabelEncoder
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA

#wykorzystanie metody analizy głównych składowych do zmniejszenia wymiarowości zbioru danych oraz do rozpoznania struktury zbioru danych

df = pd.read_csv("kawa.txt", delim_whitespace=True, header=0)
print(df.head())
 
#zamiana na zapis liczbowy
le = LabelEncoder()
df_copy = df.copy()
df_copy['Kawa'] = le.fit_transform(df_copy['Kawa']) 
print(df_copy)
 
#sprawdzenie jak parametry rozkładają się w grupach dla poszczególnych #przypadków
fig = px.parallel_coordinates(df_copy, dimensions=df_copy.columns[1:12], color='Kawa')
fig.show()
 
yy = df['Kawa']
le = LabelEncoder() # transformacja macierzy yy
yy = le.fit_transform(yy) 
 
df = df.set_index('Kawa')
del df['Zn']
del df['K']
 
X = df.values[:,0:9] # Zmienne objaśniające
y1 = ['P', 'Mn', 'Fe', 'Mg', 'Cu', 'Ca', 'Sr', 'Ba', 'Na']
le = LabelEncoder() # transformacja macierzy y
y = le.fit_transform(y1.copy()) 
 
scalar = StandardScaler()
scalar.fit(X)
scaled_data = scalar.transform(X)
 
pca = PCA(n_components=9)
modelPC = pca.fit(X) 
 
# Procent opisywanej zmienności w formie num. i wykresu słupkowego
print('\nExplained variance / %: ')
for i in range(9):
 print('% 4.2f' % (100*pca.explained_variance_ratio_)[i])
splot = sns.barplot(np.arange(1,10), pca.explained_variance_ratio_, color='grey')
plt.xlabel('Component number')
plt.ylabel('Explained variance')
plt.show()
# Skumulowana zmienność
sns.barplot(np.arange(1,10), np.cumsum(pca.explained_variance_ratio_), color='grey')
plt.xlabel('Number of components') 
plt.ylabel('Cumulative explained variance')
plt.show()
 
pca = PCA(n_components = 4) # tutaj wybrano tylko cztery składowe
pca.fit(scaled_data)
x_pca = pca.transform(scaled_data)
# Wyniki - rzut na PC1/PC2
plt.figure(figsize =(8, 6))
plt.scatter(x_pca[:, 0], x_pca[:, 1], c = yy, cmap ='plasma')
plt.xlabel('PC1')
plt.ylabel('PC2')
plt.show()
 
# Wagi składowych (loadings == components_)
print('Loadings: ')
print(pca.components_[0:4,:] )
df_comp = pd.DataFrame(pca.components_, columns = y1)
# Mapa cieplna - ładunki składowych
plt.figure(figsize =(14, 6))
sns.heatmap(df_comp, cmap="Greens")